<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[彼得_$]]></title>
  <link href="http://gxcsoccer.github.com/atom.xml" rel="self"/>
  <link href="http://gxcsoccer.github.com/"/>
  <updated>2012-08-15T23:43:04+08:00</updated>
  <id>http://gxcsoccer.github.com/</id>
  <author>
    <name><![CDATA[彼得_$]]></name>
    <email><![CDATA[gxcsoccer@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[前端中的数学知识]]></title>
    <link href="http://gxcsoccer.github.com/blog/2012/06/24/mathematic-in-web/"/>
    <updated>2012-06-24T22:48:00+08:00</updated>
    <id>http://gxcsoccer.github.com/blog/2012/06/24/mathematic-in-web</id>
    <content type="html"><![CDATA[<p>最近在学习webgl，看得很吃力，感叹学校里的数学知识都已经全还给老师。总结一下这几天恶补的数学知识，以免猴子搬苞谷。。。</p>

<h2>矢量（vector）</h2>

<p><strong>矢量</strong>亦称<strong>向量</strong>。指一个同时具有大小和方向的几何对象，数学中相对于<strong>标量</strong>（只有大小）。</p>

<p>矢量有多种表示方法，比如：用起点A和终点B来表示<img src="http://gxcsoccer.github.com/images/post/vector.png" alt="" />；在三维直角坐标系Oxyz里可以用原点（0,0,0）到空间中任意一点表示一个向量。</p>

<p><img src="http://gxcsoccer.github.com/images/post/3d.png" alt="" /> <img src="http://gxcsoccer.github.com/images/post/col_vector.png" alt="" /></p>

<h3>单位矢量</h3>

<p>矢量空间中的单位矢量就是长度为1的矢量。也就是<strong>模</strong>为1的矢量。</p>

<h3>基本矢量</h3>

<p>三维直角坐标系中，基本矢量就是以横轴（Ox）、竖轴（Oy） 以及纵轴（Oz） 为方向的三个单位矢量<img src="http://gxcsoccer.github.com/images/post/unit_v.png" alt="" />。这三个矢量取好以后，其它的矢量就可以通过三元数组来表示，因为它们可以表示成一定倍数的三个基本矢量的总合。比如说一个标示为(2,1,3)的矢量就是2个矢量<img src="http://gxcsoccer.github.com/images/post/i_v.png" alt="" />加上1个矢量<img src="http://gxcsoccer.github.com/images/post/j_v.png" alt="" />加上3个矢量<img src="http://gxcsoccer.github.com/images/post/k_v.png" alt="" />得到的矢量。</p>

<p><img src="http://gxcsoccer.github.com/images/post/v_fn.png" alt="" /></p>

<p>更多矢量相关知识参考：<a href="http://zh.wikipedia.org/wiki/%E7%9F%A2%E9%87%8F">http://zh.wikipedia.org/wiki/%E7%9F%A2%E9%87%8F</a>， 这里就不赘述了。</p>

<h2>矩阵（Matrix）</h2>

<p>数学上，一个m×n的矩阵是一个由m行n列元素排列成的矩形阵列。矩阵里的元素可以是数字、符号或数学式。以下是一个由6个数字符素构成的2行3列的矩阵：<img src="http://gxcsoccer.github.com/images/post/matrix.png" alt="" /></p>

<!--more-->


<h3>矩阵的运算</h3>

<p>矩阵的运算包括加（减），数乘，转置和乘法等。</p>

<blockquote><p>加法: m * n 矩阵A和B的和（差）：A±B为一个m×n矩阵，其中每个元素是A和B相应元素的和（差）</p>

<p>数乘：标量c与矩阵A的数乘：cA的每个元素是A的相应元素与c的乘积</p>

<p>转置：m * n 矩阵A的转置是一个n×m的矩阵，记为AT（有些书中也记为Atr 或tA、A&#8217;），其中的第i个行向量是原矩阵A的第i个列向量；或者说，转置矩阵AT第i行第j列的元素是原矩阵A第j行第i列的元素</p></blockquote>

<p>下面着重讲下矩阵的乘法</p>

<blockquote><p>两个矩阵的乘法仅当第一个矩阵A的列数和另一个矩阵B的行数相等时才能定义。如A是m * n矩阵和B是n * p矩阵，它们的乘积AB是一个m * p矩阵，它的一个元素</p>

<p><img src="http://gxcsoccer.github.com/images/post/m_m.png" alt="" /></p>

<p>其中 1 ≤ i ≤ m, 1 ≤ j ≤ p</p></blockquote>

<p>矩阵的乘法满足结合律和分配律，但是不满足交换律。</p>

<p>更多矩阵相关知识参考：<a href="http://zh.wikipedia.org/wiki/%E7%9F%A9%E9%98%B5">http://zh.wikipedia.org/wiki/%E7%9F%A9%E9%98%B5</a></p>

<h2>线性变换</h2>

<p>中学的时候，我们学习了一元线性方程<strong>f(x) = kx</strong>，如果将他放到2维的坐标系中，它就是一条过原点的直线。现在我们从2维推广到n维</p>

<p><img src="http://gxcsoccer.github.com/images/post/fn_group.png" alt="" /></p>

<p>好像复杂了很多，它还能称之为线性方程吗？</p>

<p>现在我们就要运用上面讲到的向量和矩阵来表示n维线性方程，它的形式是<strong>b = Ax</strong>，</p>

<p><img src="http://gxcsoccer.github.com/images/post/fn_group2.png" alt="" /></p>

<p>A是一个m x n的矩阵，x是一个向量，你可能发现了，这和上面最简单的一元线性方程很像，这样初等线性函数和高等线性函数在形式上就统一起来了。</p>

<p>从几何上解释<strong>b = Ax</strong>就是：向量x经过线性变换后变成了向量b。换句话说我们可以用矩阵来表达<strong>线性变换</strong>，矩阵A就是这个线性变换的<strong>变换矩阵</strong></p>

<p>那我们常见的线性变换有：</p>

<ul>
<li>旋转</li>
<li>缩放</li>
<li>平移（注意：平移本来不是线性变换，但我们可以用n+1维矩阵来表示）</li>
</ul>


<p>我来看看在三维空间下，它们的变换矩阵分别是什么呢？</p>

<h3>平移变换</h3>

<p>大家下面看到的变换矩阵都是4 * 4的，主要原因是为了将平移和其他线性变换能够统一起来</p>

<p><img src="http://gxcsoccer.github.com/images/post/tranlate.jpg" alt="" /></p>

<h3>缩放变换</h3>

<p>局部比例变换的变换矩阵如下：</p>

<p><img src="http://gxcsoccer.github.com/images/post/p_scale.gif" alt="" /></p>

<p>整体比例变换的变换矩阵如下：</p>

<p><img src="http://gxcsoccer.github.com/images/post/w_scale.gif" alt="" /></p>

<h3>旋转变换</h3>

<p>三维旋转满足右手定则：大拇指指向围绕旋转的轴向，四指转的方向为正向。</p>

<p><img src="http://gxcsoccer.github.com/images/post/rotate_rule.gif" alt="" /></p>

<p>绕z轴旋转</p>

<p><img src="http://gxcsoccer.github.com/images/post/z-rotate.jpg" alt="" /></p>

<p>绕x轴旋转</p>

<p><img src="http://gxcsoccer.github.com/images/post/x-rotate.jpg" alt="" /></p>

<p>绕y轴旋转</p>

<p><img src="http://gxcsoccer.github.com/images/post/y-rotate.jpg" alt="" /></p>

<p>我们可以试着证明一下绕x轴的旋转变换矩阵:</p>

<blockquote><p>例如：有一个向量v = (x, y, z), 现在我想让它绕x轴旋转Ɵ度，得到一个新得向量w。根据上面内容，我们应该用(x, y, z, 1)乘以Trx，根据矩阵乘法法则，得到的新向量w = (x, ycosƟ － zsinƟ, zcosƟ ＋ ysinƟ)</p>

<p>我们用另外的思路推导一下，假设向量v的模为r，旋转前相对于x轴的角度为∂，那么旋转Ɵ度后，在y轴上的投影为r * cos(∂ + Ɵ)，在z轴上的投影为r * sin(∂ + Ɵ)，根据正弦余弦公式的推导</p>

<p>r * cos(∂ + Ɵ) = r * (cos∂cosƟ - sin∂sinƟ)</p>

<p>r * cos(∂ + Ɵ) = r * cos∂cosƟ - r * sin∂sinƟ</p>

<p><em>r * cos(∂ + Ɵ) = ycosƟ － zsinƟ</em></p>

<p>同理：</p>

<p>r * sin(∂ + Ɵ) = r * (sin∂cosƟ + cos∂sinƟ)</p>

<p>r * sin(∂ + Ɵ) = r * sin∂cosƟ + r * cos∂sinƟ   <br/>
<em>r * sin(∂ + Ɵ) = zcosƟ ＋ ysinƟ</em></p></blockquote>

<p>先写到。。。睡觉了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript奇技淫巧（持续更新）]]></title>
    <link href="http://gxcsoccer.github.com/blog/2012/05/09/javascript-tips/"/>
    <updated>2012-05-09T02:21:00+08:00</updated>
    <id>http://gxcsoccer.github.com/blog/2012/05/09/javascript-tips</id>
    <content type="html"><![CDATA[<p>JavaScript是一门很“飘逸”的语言，网上很多朋友总结了其中不少奇技淫巧。其实，这些技巧并不都推荐使用，但是了解其背后的原理能帮助你更上一层楼。在此收集了其中一些附在下面：</p>

<h2>把数值类型装换为字符串</h2>

<h3>转型： 1 + &#8221;</h3>

<blockquote><p>这个比较简单，加法运算符接收两个参数中，任意一个是字符串，会将另位一个转换为字符串，然后拼接起来。</p></blockquote>

<h2>把字符串转换为数值类型</h2>

<h3>转型：+&#8217;1&#8217;</h3>

<blockquote><p>我们知道<code>-</code>作为减法运算符时接收两个参数，而作为求负运算符时，接收一个参数。JavaScript 支持另一个不多见的“求正”的<code>+</code>运算符。显然，<code>+</code>会尝试把任何接收到的参数转换为数值型。如此，我们就有了一个廉价转型方法，考虑一下：<code>parseInt('123')</code>vs<code>+'123'</code>.</p></blockquote>

<h3>举一反三</h3>

<ul>
<li><code>'1' * 1</code>乘法运算符接收数值型参数，字符串会先转换成数字再和1做计算</li>
<li><code>'1' / 1</code>同上</li>
<li><code>'1' - 0</code>同上</li>
<li><code>'1' + 0</code>注意是不行的，它得到的值是：<code>'10'</code>。因为加法运算符两个参数中如果有一个为字符串，会将另外一个转换为字符串，然后将两个字符串拼接起来</li>
</ul>


<h3>转型并取整：&#8217;123.4&#8217; | 0</h3>

<blockquote><p>这里使用“或运算”将左边得字符串隐式转换为数值型，再与<code>0</code>或。所有位运算逗要求使用<strong>32</strong>位整数参与运算。所以这又式一个廉价得转换取整方法。考虑一下：<code>Math.floor('1234.5')</code>vs<code>'1234.5' | 0</code></p>

<p>但是，<strong>32</strong>位整数表示的数据范围是有限的，因此这一招在数值超过2<sup>31</sup> - 1时不适用，考虑一下<code>'12345678912.3' ^ 0</code></p></blockquote>

<h3>举一反三</h3>

<ul>
<li><code>'1234.5' ^ 0</code>完成转型并取整，与<code>0</code>异或，得到它本身。</li>
<li><code>~~'1234.5'</code>同样可以完成转型并取整，两次取反后得到本身。</li>
<li><code>--'1234.5'</code>会失败。虽然我们说负负得正，但是在C语系中，<code>--</code>运算符优先级高于单个<code>-</code>。解决办法很简单，把<code>--</code>写成<code>- -</code>就好啦，赠加一个空格避免运算符被错误地识别。同理，<code>++</code>也要这么处理。</li>
</ul>


<!--more-->


<h2>数组操作</h2>

<blockquote><p>arguments是一个“著名”的类数组对象。在看JQuery代码的时候发现，只要一个Object实现了splice方法和length属性，在浏览器中就会被认为是一个数组</p></blockquote>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/LbyMF/embedded/js/light/"></iframe>


<h3>遍历数组</h3>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/tazSk/embedded/js/light/"></iframe>


<blockquote><p>淫巧1有一个问题：当数组元素是null，undefined，0，false等时会造成循环终止。</p>

<p>淫巧2说明数组也是一个普通的Object，索引0,1,2…是数组的属性，需要注意的是在Javascript里面纯数字是不能作为变量和属性名字的，作为Object的属性时，它们实际上是string类型的，鲜为人知的是用中括号[]存取时，JS引擎内部隐式的将数字转成了字符串。</p></blockquote>

<h2>懒人的闭包</h2>

<p>闭包即<code>function() {}</code>代码块。通常需要控制JavaScript变量作用域时，我们把代码放在这个块中运行：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">sth</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">);</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>失败的闭包</h3>

<p>上面的代码中要写两对括号，如果代码块太长的话，上下的括号不方便对照。于是，你可能会有意无意漏掉<code>function</code>周围的括号:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">sth</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">);</span>
</span><span class='line'><span class="p">}();</span>
</span></code></pre></td></tr></table></div></figure>


<p>很不幸，运行这段代码会报语法错误（不同 JavaScript 执行程序抛出的异常信息可能会不一样）：</p>

<p><code>Exception: SyntaxError: Unexpected token '('</code></p>

<blockquote><p>背景知识：<strong><code>()</code>只能用来求值、定义参数列表或调用函数表达式（<em>expression</em>）</strong>。本来，<code>function() {}</code>定义的一个函数字面量（如同数组字面量 []）表达式是可以拿来调用的，但是由于设计上的原因，<code>function</code>有两种表达形式：<code>function fn() {};</code>: 这是函数声明（<em>declaration</em>）的语句（statement）；<code>var foo = function() {}</code>: 这是函数字面量（<em>literal</em>）表达式。与上面雷同的写法<code>var foo = function fn() {}</code>也是合法的表达式，不过有一点小<a href="http://ejohn.org/apps/learn/#11">区别</a>。</p></blockquote>

<p>即是说，<strong>JavaScript 需要有足够的上下文（<em>context</em>）才能判断 function 的使用属于语句还是表达式。</strong>
S
对于单独（在语句前后加上分号将其表达为独立语句）的<code>;function() {}();</code>来说，JavaScript无法区分其中的<code>function</code>是表达式还是语句。此时，JavaScript选择了传统的语句识别，于是它被识别为两个语句————两个有问题的语句：前者缺少函数名称声明，后者不允许使用空的<code>()</code>进行求值。</p>

<p>于是懒人们行动了，网上流传了一些不写第一组括号也能正确运行的闭包。</p>

<h3>懒人的解决方案</h3>

<p>这是比较常见的懒人闭包：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">+</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">sth</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">);</span>
</span><span class='line'><span class="p">}();</span>
</span></code></pre></td></tr></table></div></figure>


<p>为什么它能执行？因为它很好地“营造”了一个让JavaScript将其中的 <code>function</code>识别为表达式的环境————通过单目求正运算符，让 JavaScript知道这里的<code>function</code>不可能是语句。哪有对语句进行运算的啊。</p>

<h3>举一反三</h3>

<p>既然写个<code>+</code>运算符就行，那就好玩了：</p>

<ul>
<li><code>-function() { return -1; }()</code>求负也行哈。PS: 如果你运行这个语句，会得到 1, 因为函数返回的 -1 被你求负了一次。</li>
<li><code>!function() { return -1; }()</code>取非也没问题。提问：运行它会返回什么？</li>
<li><code>1 + function() { return -1; }()</code>非常标准的表达式，当然 OK 啦…</li>
<li><code>void function() { return -1; }()</code>亲，<code>void</code>也是运算符哦，<code>delete</code>能用吗？当然可以！</li>
<li><code>1, function() { return -1; }()</code>别把逗号不当运算符！</li>
<li><code>~function() { return -1; }()</code>位运算符也来凑热闹了哈…</li>
<li>还可以写很多，随便怎么玩，只要组成表达式就行，自由发挥吧…</li>
</ul>


<h2>String.replace的妙用</h2>

<blockquote><p>JavaScript的<code>String.replace</code>方法应该大家都了解，可是你掌握了吗？<code>replace</code>有接受两个参数，第一个参数可以是字符串，也可以是正则表达式，第二个参数除支持字符串之外，还支持$1形式正则匹配的文本，除此之外还支持传入一个处理函数，这个函数的return值就是要替换成的内容。</p>

<p>了解更多javascript的String.replace用法，访问：<a href="http://www.w3school.com.cn/js/jsref_replace.asp">http://www.w3school.com.cn/js/jsref_replace.asp</a></p></blockquote>

<p>在实际开发中，我们会遇到对于一些集合做重复性的操作。假如，我们要获取div1, div2, div3…的长和宽。最笨的办法就是先取div1的，再取div2的，以此类推。这样重复代码多，而且不“优雅”。当然你也可以将重复代码提取为一个函数，但是这个函数可能就这个地方用的到，没有通用性，比较浪费。</p>

<p>那么自然大家想到了使用循环，将div1, div2, div3…放到数组里面，然后循环数组</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;div1&#39;</span><span class="p">,</span> <span class="s1">&#39;div2&#39;</span><span class="p">,</span> <span class="s1">&#39;div3&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">i</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// do something</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然还可以这样：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;div1 div2 div3&#39;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">i</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// do something</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样对于支持forEach的高级浏览器还是可以的，否则需要扩展数组原型了，不提倡扩展原型，即使不扩展原型提供个额外的函数来操作，就又是浪费。</p>

<p>如果使用了JQuery或者underscore，还可以用它提供的each方法：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="s1">&#39;div1 div2 div3&#39;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">),</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">a</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// do something</span>
</span><span class='line'><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，其实我们用replace就可以实现类似的功能：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">wh</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="s2">&quot;div1 div2 div3&quot;</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^ ]+/g</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">wh</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="s1">&#39;Width Height&#39;</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^ ]+/g</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">wh</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">elem</span><span class="p">[</span><span class="s1">&#39;offset&#39;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">]</span> <span class="o">||</span> <span class="nx">elem</span><span class="p">[</span><span class="s1">&#39;client&#39;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">wh</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>位运算判断元算是否在集合中</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">~</span><span class="s1">&#39;abc&#39;</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// do something</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 等价于</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// do something</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>背景知识：<code>补码</code>：任何数值n的位反等于-(n + 1):
~n === -(n + 1)。很明显，只有~-1才等于0。</p>

<p>String的<code>indexOf</code>方法，找到时，返回自然数；没找到，则返回-1。</p></blockquote>

<p>其实两种写法的差别不大，用位运算更简洁一些，但随之而且也可能造成代码比较晦涩</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始用octopress写博客]]></title>
    <link href="http://gxcsoccer.github.com/blog/2012/02/13/my-first-blog/"/>
    <updated>2012-02-13T00:55:00+08:00</updated>
    <id>http://gxcsoccer.github.com/blog/2012/02/13/my-first-blog</id>
    <content type="html"><![CDATA[<h2>注册和配置Git</h2>

<p>开始之前，确保你已经有了<a href="http://github.com">Github</a>账号一枚和Git的正确配置。没有的朋友可以先移步<a href="http://github.com">Github</a>注册并<a href="http://help.github.com/win-set-up-git/">安装配置Git</a></p>

<p>首先，创建你的blog仓库：“username(请确保和你的帐号相同).github.com”</p>

<pre><code>$ mkdir username.github.com
$ cd username.github.com
</code></pre>

<p>在仓库下新建一个HTML文件</p>

<figure class='code'><figcaption><span>index.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>Hello World<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1&gt;</span>Hello World!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>初始化仓库、提交并push到Github:</p>

<pre><code>$ git init
$ git add .
$ git commit -a -m 'init commit.'
$ git remote add origin
$ git push origin master
</code></pre>

<p>ok了，用username.github.com就可以访问上面的页面</p>

<!--more-->


<h2>安装Octopress</h2>

<p><a href="http://octopress.org/">Octopress</a>是一个基于ruby的静态博客管理工具。具体安装过程可以参考<a href="http://octopress.org/docs/setup/">官方网站</a>，这里就不赘述了</p>

<p>这里只讲一些要点：</p>

<ul>
<li>需要在定制文件： <code>_config.yml</code> 中把twitter中的信息全部删掉，否则由于防火长城GFW的原因，将会造成页面load很慢。</li>
<li>需要在定制文件/source/_includes/custom/head.html 把google的自定义字体去掉，否则方滨兴老师会让你的网站时不时卡一下。</li>
<li>发布文章用<code>rake new_post["title"]</code></li>
<li>文章使用markdown语言进行编写，相关的语法可以参考<a href="http://daringfireball.net/projects/markdown/syntax">这里</a></li>
<li>文章写好以后用<code>rake generate</code>生成静态HTML页面，建议用<code>rake preview</code>在本地预览以下<a href="http://localhost:4000">http://localhost:4000</a></li>
<li>没有问题后调用<code>rake deploy</code>部署。</li>
</ul>


<h2>Q&amp;A</h2>

<h3>解决rake generate命令invalid byte错误的方法</h3>

<p><img src="http://gxcsoccer.github.com/images/post/invalid_byte.png" title="Invalid Byte" alt="Invalid Byte" /></p>

<pre><code>$ export LC_CTYPE=en_US.UTF-8
$ export LANG=en_US.UTF-8
</code></pre>

<h2>参考文档</h2>

<ul>
<li><a href="http://octopress.org/docs/">http://octopress.org/docs/</a></li>
<li><a href="http://tangqiaoboy.blog.163.com/blog/static/1161142582011112510244675/">http://tangqiaoboy.blog.163.com/blog/static/1161142582011112510244675/</a></li>
<li><a href="http://daringfireball.net/projects/markdown/syntax">http://daringfireball.net/projects/markdown/syntax</a></li>
<li><a href="http://taberh.me/2011/12/26/use-Jekyll-build-Blog-on-Github.html">http://taberh.me/2011/12/26/use-Jekyll-build-Blog-on-Github.html</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
