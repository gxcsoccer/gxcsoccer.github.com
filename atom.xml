<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[(:◎)≡]]></title>
  <link href="http://gxcsoccer.github.com/atom.xml" rel="self"/>
  <link href="http://gxcsoccer.github.com/"/>
  <updated>2013-07-14T02:19:49+08:00</updated>
  <id>http://gxcsoccer.github.com/</id>
  <author>
    <name><![CDATA[髙小浪]]></name>
    <email><![CDATA[gxcsoccer@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[伤不起的排序]]></title>
    <link href="http://gxcsoccer.github.com/blog/2013/07/13/weird-sort/"/>
    <updated>2013-07-13T22:37:00+08:00</updated>
    <id>http://gxcsoccer.github.com/blog/2013/07/13/weird-sort</id>
    <content type="html"><![CDATA[<h2>Chrome的bug?</h2>

<p>在JavaScript里排序，我们一般都会用Array类的sort方法，例如：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 将数组降序排序</span>
</span><span class='line'><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">a</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// [4, 4, 3, 2, 1]</span>
</span></code></pre></td></tr></table></div></figure>


<p>没问题，那我们再看一个例子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 将数组降序排序</span>
</span><span class='line'><span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">a</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// chrome [4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Firefox和IE下结果正确，但是在chrome下结果大跌眼镜，4跑到最前面去了，这难道是chrome的bug吗？</p>

<h2>V8排序的算法</h2>

<p>于是我翻出<a href="http://v8.googlecode.com/svn/trunk/src/array.js">V8引擎对数组排序实现的代码</a>，研究了一番</p>

<!--more-->




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">ArraySort</span><span class="p">(</span><span class="nx">comparefn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// …</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">InsertionSort</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">InsertionSort</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">from</span><span class="p">,</span> <span class="nx">to</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">from</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">to</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&gt;=</span> <span class="nx">from</span><span class="p">;</span> <span class="nx">j</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">order</span> <span class="o">=</span> <span class="o">%</span> <span class="nx">_CallFunction</span><span class="p">(</span><span class="nx">receiver</span><span class="p">,</span> <span class="nx">tmp</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">comparefn</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">order</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">a</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">tmp</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">a</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">element</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// …</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">QuickSort</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">QuickSort</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">from</span><span class="p">,</span> <span class="nx">to</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">third_index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Insertion sort is faster for short arrays.</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">to</span> <span class="o">-</span> <span class="nx">from</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">InsertionSort</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">from</span><span class="p">,</span> <span class="nx">to</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">to</span> <span class="o">-</span> <span class="nx">from</span> <span class="o">&gt;</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">third_index</span> <span class="o">=</span> <span class="nx">GetThirdIndex</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">from</span><span class="p">,</span> <span class="nx">to</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">third_index</span> <span class="o">=</span> <span class="nx">from</span> <span class="o">+</span> <span class="p">((</span><span class="nx">to</span> <span class="o">-</span> <span class="nx">from</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// Find a pivot as the median of first, last and middle element.</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">v0</span> <span class="o">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">from</span><span class="p">];</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">v1</span> <span class="o">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">to</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">v2</span> <span class="o">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">third_index</span><span class="p">];</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">c01</span> <span class="o">=</span> <span class="o">%</span> <span class="nx">_CallFunction</span><span class="p">(</span><span class="nx">receiver</span><span class="p">,</span> <span class="nx">v0</span><span class="p">,</span> <span class="nx">v1</span><span class="p">,</span> <span class="nx">comparefn</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">c01</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// v1 &lt; v0, so swap them.</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="nx">v0</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">v0</span> <span class="o">=</span> <span class="nx">v1</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">v1</span> <span class="o">=</span> <span class="nx">tmp</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="c1">// v0 &lt;= v1.</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">c02</span> <span class="o">=</span> <span class="o">%</span> <span class="nx">_CallFunction</span><span class="p">(</span><span class="nx">receiver</span><span class="p">,</span> <span class="nx">v0</span><span class="p">,</span> <span class="nx">v2</span><span class="p">,</span> <span class="nx">comparefn</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">c02</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// v2 &lt;= v0 &lt;= v1.</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="nx">v0</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">v0</span> <span class="o">=</span> <span class="nx">v2</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">v2</span> <span class="o">=</span> <span class="nx">v1</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">v1</span> <span class="o">=</span> <span class="nx">tmp</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// v0 &lt;= v1 &amp;&amp; v0 &lt; v2</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">c12</span> <span class="o">=</span> <span class="o">%</span> <span class="nx">_CallFunction</span><span class="p">(</span><span class="nx">receiver</span><span class="p">,</span> <span class="nx">v1</span><span class="p">,</span> <span class="nx">v2</span><span class="p">,</span> <span class="nx">comparefn</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">c12</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// v0 &lt;= v2 &lt; v1</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="nx">v1</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">v1</span> <span class="o">=</span> <span class="nx">v2</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">v2</span> <span class="o">=</span> <span class="nx">tmp</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// v0 &lt;= v1 &lt;= v2</span>
</span><span class='line'>        <span class="nx">a</span><span class="p">[</span><span class="nx">from</span><span class="p">]</span> <span class="o">=</span> <span class="nx">v0</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">a</span><span class="p">[</span><span class="nx">to</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">v2</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">pivot</span> <span class="o">=</span> <span class="nx">v1</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">low_end</span> <span class="o">=</span> <span class="nx">from</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// Upper bound of elements lower than pivot.</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">high_start</span> <span class="o">=</span> <span class="nx">to</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// Lower bound of elements greater than pivot.</span>
</span><span class='line'>        <span class="nx">a</span><span class="p">[</span><span class="nx">third_index</span><span class="p">]</span> <span class="o">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">low_end</span><span class="p">];</span>
</span><span class='line'>        <span class="nx">a</span><span class="p">[</span><span class="nx">low_end</span><span class="p">]</span> <span class="o">=</span> <span class="nx">pivot</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// …</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">to</span> <span class="o">-</span> <span class="nx">high_start</span> <span class="o">&lt;</span> <span class="nx">low_end</span> <span class="o">-</span> <span class="nx">from</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">QuickSort</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">high_start</span><span class="p">,</span> <span class="nx">to</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">to</span> <span class="o">=</span> <span class="nx">low_end</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">QuickSort</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">from</span><span class="p">,</span> <span class="nx">low_end</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">from</span> <span class="o">=</span> <span class="nx">high_start</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="c1">// …</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">QuickSort</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">num_non_undefined</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// …</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>V8的实现是当数组长度小于10的时候采用插入排序，否则使用快速排序。我们刚才的第二个例子的数组长度为12，所以应该走快速排序的逻辑，而大家知道快速排序算法的思想就是找到一个轴，将大于和小于它的数据分居在轴两侧，然后递归这一动作直到结束。</p>

<p>那么我们可以用例子二的数据模拟下V8算法的流程：</p>

<ol>
<li>首先找到v0，v1，v2三个位置（头，尾，正中间）</li>
<li>用comparefn判断v0（头）和v1（尾）两个位置的数据是否应该交换，我们传入的comparefn是返回<code>a &lt; b</code>，那么<code>5 &lt; 5</code>应该返回false（即c01），而上面代码的第40行<code>if (c01 &gt; 0)</code>的判断语句应该为false，所以无需交换头尾位置；</li>
<li>再用comparefn判断v0（头）和v2（正中）两个位置是否应该交换，那么<code>5 &lt; 4</code>返回false（即c02），那么根据47行的条件判断<code>if (c02 &gt;= 0)</code>（c02隐式转换为0，所以0 >= 0为真），应该交换v0和v2，到这里我们已经可以看出为什么降序排序最小的4反而跑到最前面去了。（后面的流程略过）</li>
</ol>


<p>那么这是v8或者chrome的bug吗？我google了下，确实不少人提到了这个<a href="http://code.google.com/p/v8/issues/detail?id=103">issue</a>。根据上面的回复以及<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">MDN</a>上对于compareFn的定义，严格来说v8实现的没有问题，问题在于我的comparefn返回的是一个布尔值（true or false），而ECMAScript里期待comparefn返回的是-1，0和1三种数值，这里true转换成了1，false转换成了0，而对于0这个值的处理ECMAScript里没有做明确的规定，所以导致各个浏览器实现的不一致。</p>

<p>那么我们把comparefn替换成标准的返回-1，0和1的函数，再看看结果</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 将数组降序排序</span>
</span><span class='line'><span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">a</span> <span class="o">===</span> <span class="nx">b</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="nx">a</span> <span class="o">&lt;</span> <span class="nx">b</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5， 4]</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK，完全正确，所以说在写comparefn时一定要对三种情况分别返回-1，0和1，否则就会出现上面例子2的莫名其妙的问题。</p>

<p>说到这里，一声叹息！今年年初winter老师面试我的时候也提到了这个问题，当时我的回答不是很理想，也没太在意，没想到今天就踩到这个坑里面去了，伤不起阿，真得伤不起阿。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[监听DOM Tree]]></title>
    <link href="http://gxcsoccer.github.com/blog/2013/07/04/detect_dom_tree/"/>
    <updated>2013-07-04T00:33:00+08:00</updated>
    <id>http://gxcsoccer.github.com/blog/2013/07/04/detect_dom_tree</id>
    <content type="html"><![CDATA[<p>最近一个项目中需要监听DOM tree的改变，首先想到使用<a href="https://developer.mozilla.org/zh-CN/docs/DOM/MutationObserver">MutationObserver</a>。</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/5s5gc/embedded/js/light/"></iframe>


<p>不过发现在低版本的webkit里面并不支持该API。于是考虑使用Mutation events，查了一下资料虽然很多浏览器目前仍然支持Mutation events，但是在W3C的标准里它已被废弃，取而代之的就是之前提到的MutationObserver。关于Mutation events的问题，引用一段John Resig的描述：</p>

<blockquote><p>Yes, DOM mutation events already exist (in Firefox and Opera – fairly reliably – and dicey in Safari). They have a huge problem, though:</p>

<p>They absolutely cripple DOM performance on any page which they’re enabled.</p>

<p>Firefox, for example, when it realizes that a mutation event has been turned on, instantly goes into an incredibly-slow code path where it has to fire events at every single DOM modification. This means that doing something like .innerHTML = “foo” where it wipes out 1000 elements would fire, at least 1000 + 1 events (1000 removal events, 1 addition event).</p></blockquote>

<p>总而言之，Mutation events会带来很大的性能问题，所以我们似乎也不应该使用它，那么还有什么其他方法吗？</p>

<h3>高效的山寨DOMNodeInserted事件</h3>

<p>是的，还真有。我们可以利用CSS3的animationStart事件来模拟DOMNodeInserted事件。</p>

<p>具体方法是：<br/>
1. 给指定的元素添加一个非常短暂的关键帧动画，比如叫：nodeInserted<br/>
2. 监听animationStart事件<br/>
3. 通过事件的animationName属性过滤，找到我们关心的元素</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/KtZrh/embedded/result,js,css,html/light/"></iframe>


<p>由于有动画的元素相对较少，所以该方法的性能比Mutation events会高出不少，并且在所有支持的CSS3 animation的浏览器上都支持，怎么样？很酷吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5物理引擎--Verlet.js]]></title>
    <link href="http://gxcsoccer.github.com/blog/2013/06/27/phyical-engine/"/>
    <updated>2013-06-27T22:37:00+08:00</updated>
    <id>http://gxcsoccer.github.com/blog/2013/06/27/phyical-engine</id>
    <content type="html"><![CDATA[<p>首先，让我们来看一个HTML5模拟的衣服效果:</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/sRR4z/embedded/result,js,html/light/"></iframe>


<p>很酷吧，要实现这样的效果想必很难吧？的确，如果没有框架的支持我们需要了解一些数学和运动学的基本知识。不过，下面我要隆重推出本文主角——</p>

<h2><a href="https://github.com/subprotocol/verlet-js">Verlet</a></h2>

<p>它是一个开源的js物理引擎，相比于其他同类引擎，它有下面优势</p>

<ul>
<li>非常轻量级，未压缩的也不过不到700行</li>
<li>相比其体积，它提供了强大的功能和良好的扩展性</li>
<li>易用的API，类库内置了4种物理元素：点、线段、衣服（cloth）、多变型（tire）</li>
</ul>


<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/aJPVz/embedded/result,js,html/light/"></iframe>


<p>(未完待续)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[答题]]></title>
    <link href="http://gxcsoccer.github.com/blog/2013/05/29/exercise/"/>
    <updated>2013-05-29T23:33:00+08:00</updated>
    <id>http://gxcsoccer.github.com/blog/2013/05/29/exercise</id>
    <content type="html"><![CDATA[<p>下面是我对寒冬老师<a href="https://github.com/wintercn/blog/issues/5">题目</a>的答案。</p>

<h3>1. 你对前端职业发展有何看法？</h3>

<p>相比后端，前端具备更加丰富的知识结构，职业发展的方向应该更加广阔。但是选择多了，也可能会迷茫，再加上目前国内前端发展参差不齐，地域差异严重，主要机会都集中在北、上、杭、深等城市。所以，我的看法是首先争取进入一个优秀的团队，和优秀的人一起做事，不断提高自己；另外我认为无论是转管理，转产品还是一直做技术都不重要，重要的是你的职业生涯是往上走的。就我个人而言，未来两到三年内重心还是放在技术上面，希望能够完成一或几个自己满意的作品。</p>

<h3>2. 前端和后端程序员应该如何合作？</h3>

<p>前端要拥抱变化，而后端希望保持稳定，必然会有争执。作为前端开发，我们可以承担更多的职责。比如：在瘦服务器端的架构里面服务端只提供数据，页面的渲染和业务逻辑都由终端来完成；在Nodejs出现以后，前端的定义已经不局限在客户端，在平台不变的情况下，我们完全可以自己给自己搭一道桥来完成新的需求。同时，前端应该对平台的更新起到牵引作用。最后，不光是前后端，任何高效的团队合作都需要解耦，我们可以通过合理的接口定义划分好各自的职责，然后通过打桩等方式模拟接口实现，最后通过两两联调和集成测试来完成对接。</p>

<h3>3. 讲几个你在项目中解决的让你印象最深的问题（难、匪夷所思、解决方案有趣都可以）</h3>

<p>选了几个项目中遇到的问题分享给大家</p>

<!--more-->


<ul>
<li><p>overflow hidden的问题<br/>
在做IPTV的前端项目的时候经常需要一些动画效果，在浏览器上调本来是好的，但在机顶盒上背景有了视频流，就会出现各种匪夷所思的问题，经过漫长的排查发现跟父容器设置了overflow: hidden有关，目前我的解决方案主要有两个，第一，去掉没有必要的overflow:hidden设置，第二，尽量用css3的transform3d代替left, top来做动画。 不过到目前为止，我还没查到一个比较权威的关于该问题的解答，我猜想是动画和滚动条互相影响导致的。</p></li>
<li><p>如何停掉css3动画<br/>
http://gxcsoccer.github.io/blog/2012/09/04/how-to-stop-css3-transition/</p></li>
<li><p>深拷贝的问题<br/>
在做前端缓存的时候，为了避免使用者污染数据，返回的时候需要做一次深拷贝。实现严谨的深拷贝是比较麻烦的，但是在大多数情况下我们缓存的是一个plainObject，所以用JSON.parse(JSON.stringify(obj)) 就实现我们的需求。</p></li>
</ul>


<h3>4. 在JavaScript面向对象方面，你有什么体会和实践？</h3>

<p><a href="http://gxcsoccer.github.io/blog/2013/05/16/javascript-oop/">http://gxcsoccer.github.io/blog/2013/05/16/javascript-oop/</a></p>

<h3>5. 谈谈JavaScript中的闭包，以及你的实践。</h3>

<p><a href="http://gxcsoccer.github.io/blog/2013/05/20/closure-summary/">http://gxcsoccer.github.io/blog/2013/05/20/closure-summary/</a></p>

<h3>6. 说说 http://m.taobao.com 前端做的最烂的地方，以及你的改进。</h3>

<p>m.taobao.com用的机会很少，说几个直观的问题吧，触屏版没有做响应式只对webkit浏览器做了支持，例如：使用了display:-webkit-box专有属性，在IE和firefox下图片无法自适应，应该设置background-size:cover，标准版很土而且有一些很低级的样式问题，比如图标和控件都有没对齐的问题，感觉做的很随意。我的建议就是通过响应式设计统一各种分辨率的体验，支持更多的机型（windows phone等）。</p>

<h3>7. 谈几个有趣的html标签，以及它们的语义。</h3>

<p>HTML5里面提供很多新的具有语义标签，不过要说有趣我认为还是下面两个，因为它们可以做很多很多有趣的事情</p>

<ul>
<li>canvas 画布，HTML5里面最重要的特性之一，有了它我们可以做出很多“疯狂”的2D/3D效果</li>
<li>video 使浏览器不依赖插件便可播放和操作视频流</li>
</ul>


<h3>8. 讲一讲CSS的position/float/display都有哪些取值，它们相互叠加时的行为都是什么？</h3>

<p><a href="http://gxcsoccer.github.io/blog/2013/05/26/css-summary/">http://gxcsoccer.github.io/blog/2013/05/26/css-summary/</a></p>

<h3>9. 说几个你觉得有趣的CSS3选择器，以及他们有趣的用法。</h3>

<p>nth-child(n)，:before/after等等，这些选择器的好处在于不用添加多余的id，class或者元素节点，来实现一些视觉上的效果，例如：给固定位置的子元素设定样式可以使用nth-child(n)或者first-child/last-child，而不用添加多余的id/class，又比如给某一个元素添加一个图标，可以使用before/after伪类，而不用添加一个多余的标签。这让HTML文档更简洁，更纯粹。</p>

<h3>10. 自己问自己一道代表你水平的面试题，然后回答。</h3>

<p>就讲讲平时怎么做性能优化的吧？</p>

<p>答：
1. 首先是要识别出性能问题，很多时候客户的表达是“页面卡，动画抖动”等等模糊的描述，而对于程序员我们需要一些更数据化，更确切的证据。这时我们可能需要依靠一些工具或者行业标准帮助我们判断，比如：我们可以测算页面帧率的变化曲线，对于那些低于25帧的地方我们就认为可能有性能的问题。
2. 其次，我们需要找到性能问题的瓶颈，做有针对性的改进。这个可能需要一些经验的积累，也可以辅以一些工具，比如：Chrome DevelopeTool等，在项目中我常碰到的性能问题主要有几种: a) DOM操作频繁，b) JavaScript代码问题，c) 频繁的IO操作，d) 动画性能 <br/>
3. 那么针对上面的问题，我们可以做一些修改：DOM操作频繁，我们可以通过缓存DOM元素，模板等方式减少直接操作DOM Tree的次数；优化低效的JavaScript代码，例如：避免嵌套的循环，避免过深层次的递归，记得清理定时器等等；对于频繁的IO操作我们可以使用合并请求以及缓存数据来规避；对于动画性能，我们可以尝试用tranform 3d+transition替换jquery动画。<br/>
4. 性能问题往往是复杂而且综合性的，我们需要经验但是不能迷信经验，如果我们做了上面的努力性能还是不令人满意，通常我们可以选择和浏览器厂商或者中间件厂商进行合作，共同定位、解决问题。<br/>
5. 如果最终还不能解决问题，那么可能就需要考虑从设计或者功能上做一些取舍来达到一个平衡点。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅谈display, position, float]]></title>
    <link href="http://gxcsoccer.github.com/blog/2013/05/26/css-summary/"/>
    <updated>2013-05-26T07:18:00+08:00</updated>
    <id>http://gxcsoccer.github.com/blog/2013/05/26/css-summary</id>
    <content type="html"><![CDATA[<p>display, position, float三者可以说是CSS布局里最基本也最常用的属性。在此对这三个属性的可选值以及互相叠加的效果做一个总结。</p>

<h2>基本概念</h2>

<h3>position</h3>

<p>通过该属性可以设置节点的定位方式，可选的值有：</p>

<ul>
<li><p>absolute 绝对定位<br/>
从文本流中抽离出来，单独生成一个“块级”盒子。该盒子的位置将相对于“显示定位”的父节点左上角来定位，如果没有“显示定位”的父节点就以body元素左上角为原点。</p></li>
<li><p>relative 相对定位<br/>
相对定位是以元素“原来”位置的基础上来定位。元素在文本流中的原始位置会保留，不会被其他元素占据</p></li>
<li><p>static 正常文本流<br/>
默认值，不定位</p></li>
<li><p>fixed 固定定位<br/>
相对于浏览器的“视口”进行定位，视口大小不受文本流大小影响。</p></li>
</ul>


<!--more-->


<h3>float</h3>

<p>浮动和绝对定位类似，被浮动的元素也会从文本流中抽离，不同的是它会曹着指定方向浮动直到碰到容器的边界或者另外一个浮动的元素，就好像顺着水流浮动的木箱子。可选的值有：</p>

<ul>
<li>none 不浮动，默认值</li>
<li>left 向左浮动</li>
<li>right 向右浮动</li>
</ul>


<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/rQutX/embedded/result,css,html/light/"></iframe>


<h3>display</h3>

<p>display属性决定了浏览器用什么样的“盒子”来渲染当前节点。display可选的值有很多，主要可以分为下面几类，本文主要讨论常用的4种取值。</p>

<h4>基本常用的值</h4>

<ul>
<li><strong>none</strong> 从DOM树上上移除该节点（包括其子节点），不会产生任何的“盒子”</li>
<li><strong>inline</strong> 这是display的默认值，行内元素不会“打断”正常的文本流，它会顺着文本流的方向横向的排列。<br/>
注：行内元素的width和height属性是不起作用的，margin和padding也只在水平方向排挤其他元素。</li>
</ul>


<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/qPeZR/embedded/result,css,html/light/"></iframe>


<ul>
<li><strong>block</strong> 和行内盒子不同的是，块级的盒子是垂直方向排列的，它会截断前后的文本流另起一行显示，如果不设置宽度则会尽可能占满正行。</li>
</ul>


<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/QEr8W/embedded/result,css,html/light/"></iframe>


<ul>
<li><strong>inline-block</strong> 结合了inline和block的特点，顺着文本流的方式水平排列，但是可以设置高度、宽度、margin和padding等。</li>
</ul>


<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/spsbj/embedded/result,css,html/light/"></iframe>


<h4>和表格相关的值</h4>

<p>包括了table, table-cell, table-column, table-colgroup, table-header-group等等，它们都强制元素以表格的方式呈现，这里不详细讲了</p>

<h4>Flex Box</h4>

<p>具体参考<a href="http://css-tricks.com/snippets/css/a-guide-to-flexbox/">这里</a></p>

<h4>Grid Box</h4>

<p>只有IE10支持，具体可以参考<a href="http://dev.w3.org/csswg/css3-grid-layout/">这里</a>。</p>

<h2>三种属性相互叠加的效果</h2>

<ol>
<li>绝对定位和fixed定位会强制生成块级元素，display的computed值为block</li>
<li>浮动也会导致display值变为block，除了少数不支持浮动的display值(如：flex)</li>
<li>绝对定位和浮动放在一起，浮动无效</li>
<li>fixed定位和浮动放在一起，浮动无效</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[闭包总结]]></title>
    <link href="http://gxcsoccer.github.com/blog/2013/05/20/closure-summary/"/>
    <updated>2013-05-20T04:58:00+08:00</updated>
    <id>http://gxcsoccer.github.com/blog/2013/05/20/closure-summary</id>
    <content type="html"><![CDATA[<h2>什么是“闭包”?</h2>

<p>通俗讲闭包就是&#8211;定义在函数内部的函数可以访问外层作用域的变量。当然这只是闭包的表象，要理解闭包我们先要澄清两个容易混淆的概念。</p>

<h2>执行环境（Execute Context）</h2>

<p>当进入（开始执行）一段可执行代码时，便生成一个执行环境对象。</p>

<p>一个执行环境（Execute Context）包含三个要素：</p>

<ul>
<li>词法环境 – LexicalEnvironment</li>
<li>变量环境 – VariableEnvironment</li>
<li>This绑定 - ThisBinding</li>
</ul>


<p>注：词法环境在我理解就是所谓的“作用域”。</p>

<h2>作用域（Scope）</h2>

<p>JavaScript只有两种作用域（没有块级作用域）</p>

<ul>
<li><p>全局作用域：即全局可以访问的作用域，包括下面一些</p>

<ol>
<li>最外层定义的变量和函数</li>
<li>未定义直接赋值的变量</li>
<li>Global对象的属性</li>
</ol>
</li>
<li><p>局部作用域：只有固定代码片段可以访问，创建局部作用域（词法环境）的方式有</p>

<ol>
<li>执行函数</li>
<li>执行Catch语句</li>
<li>with</li>
</ol>
</li>
</ul>


<!--more-->


<h2>作用域链（Scope Chain）</h2>

<p>在JavaScript中，函数有一个内部属性[[Scope]]，由ECMA-262标准第三版定义，该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">bar</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>例如上面函数foo是在全局作用域上创建的，所以全局对象就填充到其作用域链上了。在执行foo函数的时候，会创建一个新的执行环境（Execute Context）包括一个新的词法环境（作用域），并将其推到作用域链的前端。</p>

<p><strong>现在回过来想想为什么JavaScript语言会有闭包就很容易理解了。因为ECMAScript中变量解析是一个自内向外查找过程，而非绑定过程。</strong></p>

<h2>闭包的实践</h2>

<h3>循环异步调用的问题</h3>

<p>闭包的一个典型的应用就是循环绑定事件。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;box&#39;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">).</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;You clicked on box #&#39;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码存在著名的&#8221;last value&#8221;问题，最终结果是点击任何一个box都提示点击的是9号。解决的方案有很多种，其中一种就是利用闭包</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;box&#39;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">).</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;You clicked on box #&#39;</span> <span class="o">+</span> <span class="nx">index</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">})(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>直接执行一个匿名函数，并将索引值<code>i</code>作为参数传入，在匿名函数内部返回另外一个匿名函数作为事件绑定的回调函数。根据闭包的原理，内部的匿名函数可以访问外层匿名函数的局部变量index，以此实现点击每个box可以弹出不同的提示。</p>

<h3>私有变量和方法</h3>

<p>上一篇文章提到过用闭包模拟OOP中的私有变量和方法，在此不在赘述了。</p>

<h3>函数的绑定</h3>

<p>由于JavaScript的异步特性，我们经常需要在执行一个操作时传入一个回调函数，默认情况下这个函数会绑定到global对象上执行，大多数时候这显然不是我们所要的，我们希望能够指定回调函数的this对象。在ES 5里面函数有一个bind方法，可以原生支持函数this的绑定，而在ES 3里我们也可以用闭包来模拟这个方法的实现</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">slice</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">;</span>
</span><span class='line'><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bind</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">args</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">0</span><span class="p">)));</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>&lt;未完待续></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OPP in JavaScript]]></title>
    <link href="http://gxcsoccer.github.com/blog/2013/05/16/javascript-oop/"/>
    <updated>2013-05-16T03:32:00+08:00</updated>
    <id>http://gxcsoccer.github.com/blog/2013/05/16/javascript-oop</id>
    <content type="html"><![CDATA[<blockquote><p>面向对象的设计思想是语言无关的。但是在实现上JavaScript和其他语言还是有些区别的。</p></blockquote>

<h2>对象的构造：</h2>

<ul>
<li><strong>字面量</strong>  可以用JSON风格直接构造一个对象，这是一种非常直接和简洁的对象创建方式。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var obj = {
</span><span class='line'>  name: "Peter Gao",
</span><span class='line'>  age: 29
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>obj.sex = "male";
</span><span class='line'>delete obj.age;</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li><p><strong>构造函数</strong>  和其他面向对象语言类似，我们可以使用new关键字加构造函数的方式来创建一个对象，在<code>new A</code>的时候JavaScript引擎做了下面几件事情：</p>

<ol>
<li>创建一个新的对象</li>
<li>将对象的contructor属性设置为A</li>
<li>将A.prototype设置为新对象的原型</li>
<li>以新对象为上下文(context)执行A</li>
</ol>
</li>
<li><p><strong>Object.create</strong>  这是ECMAScript 5里面提供的一个新方法，通过这个方法我们可以直接指定对象的原型。甚至通过<code>Object.create(null)</code>我们可以创建一个没有原型的“干净”对象</p></li>
</ul>


<!--more-->


<h2>面向对象的三大特性：</h2>

<ul>
<li><strong>封装</strong>  和其他语言不同的是，JavaScript里对象没有私有属性的概念，很多时候我们约定以下划线开头的属性为私有的，但这只是一个“君子协议”。如果实在要模拟私有属性，我们可以通过function来构造一个沙箱，沙箱里的局部变量是私有的，外部不能访问，通过function的返回值来暴露接口给外面调用</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function getObject() {
</span><span class='line'>  var privateProp = "p"; // 局部变量，外层无法访问
</span><span class='line'>  
</span><span class='line'>  return {
</span><span class='line'>      getProp: function() {
</span><span class='line'>          return privateProp;
</span><span class='line'>      },
</span><span class='line'>      setProp: function(val) {
</span><span class='line'>          privateProp = val;
</span><span class='line'>      }
</span><span class='line'>  };
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>继承</strong>  JavaScript的原生语法是不支持继承的，但是其原型链的设计可以很好的支持继承。具体的实现方法有很多种，在这儿不一一列举了。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Monster = function(life) {
</span><span class='line'>  this.life = life;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>Monster.prototype.eat = function() {
</span><span class='line'>  this.life += 5;
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>var Dragon = function() {
</span><span class='line'>  Monster.call(this, 100);
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>Dragon.prototype.__proto__ = Monster.prototype;
</span><span class='line'>
</span><span class='line'>Dragon.prototype.fight = function() {
</span><span class='line'>  this.life -= 10;
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>多态</strong>
这个没什么好说的，对象可以覆盖父类的属性和方法，因为JavaScript是顺着原型链往上查找属性和方法，直到找到为止。</li>
</ul>


<h2>鸭子类型</h2>

<p>作为一门动态语言，对象类型除了可以通过原型链来描述，还可以通过一个简单的对象来表示，即所谓的“鸭子类型”————只要看起来像鸭子，就是鸭子。这种方式可以避免构造过于复杂的原型链。我们可以将常用的功能定义为mixin，需要的话直接拿来用即可。</p>

<h2>几个重要的属性：</h2>

<ul>
<li><strong>obj.constructor</strong>: 指向对象的构造函数，这个属性可以被修改，但是不能通过修改该属性真正改变原型链</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Cat = function() {}
</span><span class='line'>var Dog = function() {}
</span><span class='line'>var c = new Cat;
</span><span class='line'>c.constructor = Dog;
</span><span class='line'>
</span><span class='line'>c.constructor === Dog     // true
</span><span class='line'>c instanceof Dog      // false
</span><span class='line'>c instanceof Cat      // true</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><strong>constructor.prototype</strong>: JavaScript里function本身也是一种特殊的对象，它包含一个属性prototype指向另一个对象，用该函数作为构造函数生成的对象就以prototype指向的对象作为原型</p></li>
<li><p><strong>obj.__proto__</strong>: 在标准浏览器上对象有一个__proto__属性指向对象的原型，其等价于<code>obj.constructor.prototype</code>（如果<code>obj.constructor</code>没有被篡改）</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一章 动画基本概念]]></title>
    <link href="http://gxcsoccer.github.com/blog/2013/03/02/basic-animation-concepts/"/>
    <updated>2013-03-02T11:56:00+08:00</updated>
    <id>http://gxcsoccer.github.com/blog/2013/03/02/basic-animation-concepts</id>
    <content type="html"><![CDATA[<p><em>这一章包含那些内容呢？</em></p>

<ul>
<li>什么是动画？</li>
<li>帧（Frames）和动作（motion）</li>
<li>动态动画 vs 静态动画</li>
</ul>


<p>浏览器从最开始获得互联网文本信息的工具，发展到今天已经逐渐演变成一个完全图像化，交互化的运行环境，迅速地颠覆了我们沟通和分享的方式。最新的HTML5标准中，加入了以前只能在native应用可用的图像处理能力。经过一段时期的停滞以后，现在浏览器正受益于新一轮HTML5，JavaScript等技术的革新。HTML5 canvas元素使我们能够创建标准的游戏，应用和动画，并且兼容各种标准浏览器和移动设备，包括目前流行的设计和平板（iPhone, iPad和Android设备）。</p>

<p>这本书囊括了使用HTML5 canvas元素和JavaScript构造动画效果的编程，数学和物理等各方面技术。你们将看到，那些绚丽的动画效果将首次在标准浏览器上得以实现。</p>

<p>在我们深入具体的技术和公式前，让我们首先很快的了解到底什么是动画？介绍一些它背后基础的概念，来帮助你创建更加有趣的动画效果</p>

<p>不管你是不是第一次接触或者已经有使用Adobe Flash等类似工具的经验，这本书都是你动画编程很好的指导。由于Flash向JavaScript的迁移，本书经历了多次改变，但是从另外一方面证明了底层的技术和数学概念是语言无关的。我们现在讨论的是web浏览器，但是只要适度的图像能力支持，这些公式和样例适用于各种编程环境。</p>

<p>当然，如果你已经迫不及待写点代码了，你也可以跳过本章。但是还是强烈建议你读一读，至少帮助你了解动画是如何工作的。</p>

<h2>什么是动画？</h2>

<!--more-->


<p>动画是动作（motion）。动作是在一段时间内物体位置的变化。这一分钟它在这儿，下一分钟它跑到那儿去了。通过用数学公式来表示物体的位置，你便能够控制它的下一个位置，影响它移动的行为－－就向赋予了它生命。</p>

<p>但是动画不仅仅是移动，它改变任何可见的属性：形状，大小，方向，颜色等等。皮球被压扁，植物生长，面部扭曲－－无论什么改变。最早的一些电脑动画通过循环改变颜色来模拟运动。比如：你可以创造一个由深浅不一的蓝色像素组成的瀑布，通过以某种频率交替色调，让它看起来像是流下来的水，虽然实际上没有任何位置的变化在屏幕上。</p>

<p>时间是动画基本的要素。它用于表达物体从一处到另外一处的变化过程。没有时间，就没有动作－－它仍然只是一幅图，不是动画。所以，没有动作，我们是感知不到时间的存在，即便就在当前。举个例子，一段来自监控摄像头拍摄的空旷车库视频，如果没有物体移动，你没法判断你是在看一个直播流5秒种前的一帧￼，还是一幅静止的图片。只有当一个塑料袋被吹过屏幕，这时你才能确定那是当前时间，后面可能还有变化。没有时间，那就只是张图片而已。</p>

<p>这又引入另外一个话题，动画能够让我们保持兴趣。如果有东西改变了，我们的大脑会自然的好奇，那变了？为什么变了？是不是我干的？变化是否符合我预期，或者我应该调整我的预期？有节奏的媒体类型（Temporal media types）总是吸引人的，像音乐和电影，因为，就像生活一样我们永远不知道下面是什么。静态的媒体（Nontemporal media）－－图片，画，文字不会改变，我们可能会深入研究这些作品，我们的理解和解释可能随时间而改变，但是作品不会变。这就是为什么动画能够吸引人。这也可以解释为什么我们可以花好几个小时欣赏一部电影或者整天沉迷于电子游戏。</p>

<h2>帧（Frames）和动作（Motion）</h2>

<p>动画实际上是产生动作的幻象，几乎所有形式的投影运动媒体运用<em>帧</em>来实现动画。</p>

<p>帧是一系列离散的图片以很快的速度连续交替显示，以此来模拟物体运动或者改变。帧是你在电脑，电视，电影屏幕上看到所有东西的基础。让我们回到最早时期的卡通。动画师在玻璃纸的每一格画独立的图，最早的动态图片也使用了相似的技术将许多张照片组合起来。</p>

<p>概念是简单的：一张一张的显示一组有着细微差别的图片，这使它们看起来就像一张“动”的图片。但是为什么我们一直强调它使动作的幻象呢？如果你在电影里看到一个人在屋里走动，那不是动作吗？当然！它只是一张人的图片，不是一个真人，但这还不是我们不承认它是动作的主要原因。</p>

<p>记住！移动的物体从一个点到另一个点，经历个其中整个空间。那才是真正的动作；物体在空间里平滑的移动，而不只是几个快照。但是以帧为基础的动作就只能做到样，它不是点到点的移动，而是先消失，然后在下一帧出现在下一个位置。移动的越快，其中跳跃的幅度越大。</p>

<p>如果你看到一幅图里面一个人站在房间的左侧，过了一会儿另外一幅图同样一个人站在房间的右侧。你应该断定这是两幅图片，而不是动画。如果你看到这个人穿过房间过程中的6张图片，你仍然认为这是一系列单独的照片。但是如果这些照片以足够快的速度播放，你可能会改变你的看法，认为是一个人穿过了这间屋子。和两张图片一样，它不是真正的动作，但是到一定程度后，你已经“上当”了。</p>

<p>这点在电影工业里已经被广泛的研究。研究者发现一秒种达到24帧，人们就会认为它是一张动态的图片。如果小于24帧／秒，可以感觉到画面产生烦人的跳动，闪烁，“幻象”便被揭穿了。并且似乎人类的眼睛不能分辨帧率高于24帧／秒，换句话说1秒种显示100帧并不能让你觉得动画更加真实了（虽然更高帧率在动画编程中能够创造更好的交互体验，动画看起来更平滑）。</p>

<h2>把帧看做记录</h2>

<p>在整个帧的概念里面，需要做到三点：存储，传输和显示。你不能存储，传输和显示一个真人，但是你可以存储许多张那个人穿过房间的图片。你也能传输和显示这些图片。因此，只要你能做到那三点，你能在任何地方任何时间显示动画。</p>

<p>现在，我们需要对帧做一个更加宽泛的定义。到目前为止，我们提到的帧都是图片或者画。让我们称之为在一个系统中某个时间点的一条记录。这个系统可以是人穿过房间途中的点，记录可以是一张图片。那么，系统也可以是一组图像化的物体（virtual object），记录就是在某一时间点他们的形状，颜色和位置。因此，你的动画不在是一系列真实的图片，而是一系列图片的描述。电脑可以根据这些描述绘制一张图片，然后显示它。</p>

<h2>可编程的帧</h2>

<p>因为你的电脑具备计算的能力，所以你不需要一长串的帧描述。你可以将它们简化为第一帧的描述，以及创造接下来帧的一些规则。所以，用电脑不仅仅可以根据帧描述来绘制图片，现在我们可以先创建帧描述，然后绘制图片，最后显示图片。</p>

<p>考虑下到用该方法可以节约多少硬盘空间。图片是占空间和带宽的，每秒钟24张图片更是如此。如果你能将它们简化为一份描述和一系列规则的话，你也许能大大减少文件大小。即使是非常复杂的动画规则所占的空间和一张中等尺寸的图片相比也要小很多。文件大小也确实是大家注意和偏爱编程动画的最重要地方之一。</p>

<p>通常，我们也要权衡。随着你系统的增大，你的规则也在变的越来越复杂，计算机需要费很大劲去计算下一帧的描述，然后再显示它。如果你需要保持一个特定的帧率，那么给计算机留下时间去处理的时间是有限的。如果计算机不能按时的计算下一场景，你的帧率将受到影响。完全基于图片的动画就不需要考虑这个问题，因为它只需要在正确的时间显示下一幅图片就可以了。</p>

<h2>动态动画和静态动画</h2>

<p>编程动画的最大好处在于它是动态的。图片在运行时才会被构造。与之对应的是像电影片尾一样的预置好的一系列帧，无论你看多少遍，它都不会改变。你也可以为每次观看都创造独特视觉体验，如果你通过用户输入例如：鼠标光标来计算物体位置，那么媒体会和用户产生互动。</p>

<p>但是编程动画也不是必须具有交互性。你可以使用代码让一个物体从某处移到某处。每次都一样的移动。这种我们称之为<em>静态</em>动画。每一帧，从头到尾都是预置好的，就像电影一样。</p>

<p>但是，如果你用程序创建了一个随机移动的物体，每次你播放该动画都会得到不同结果。再比如动画里面的某些因子可以随键盘鼠标输入而动态改变。这就使用户可以和运动的物体进行交互。</p>

<p>也许动画里面最有趣的，也是这本书最关注的就是物体在动画中的数学，物理原理在现实世界中的实现。你可以将一个物体曹任何一个方向移动，你也可以加入重力的影响，使它坠落，当它跌到“地面”，它将弹起一定高度。然后物体将最终停止在那儿。你也可以加入一些交互近来，使用户可以用鼠标“捡起”物体或者用键盘移动它。当用户抛出这个物体时，他会感觉到手里真地拿着东西一样。</p>

<p>对于动态动画，用户不再被动的接收一连串播放的帧，而是走进了你自己创造的场景中去。做为程序员，你有足够的自由去表现你认为合适的场景。这里面有很多乐趣。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简历]]></title>
    <link href="http://gxcsoccer.github.com/blog/2013/01/10/resume/"/>
    <updated>2013-01-10T22:10:00+08:00</updated>
    <id>http://gxcsoccer.github.com/blog/2013/01/10/resume</id>
    <content type="html"><![CDATA[<p>本人目前打算换工作，更新简历如下，欢迎有意者骚扰。Word版简历请猛戳<a href="http://gxcsoccer.github.com/downloads/%E7%AE%80%E5%8E%86.docx">这里</a>。</p>

<h2>基本信息：</h2>

<p><strong>姓名：</strong>高晓晨（男）</p>

<p><strong>生日：</strong>1984－05－10</p>

<p><strong>学历：</strong>2006年毕业于北京邮电大学 软件工程专业 小本</p>

<p><strong>联系方式：</strong>13540478015 ｜ gxcsoccer@126.com</p>

<p><strong>目前城市：</strong>南京</p>

<!--more-->


<h2>工作经历：</h2>

<p>工作前5年均供职于新蛋，负责开发电商内部MIS系统，主要采用.net及其微软系的产品和技术。先后待过两个项目组，从普通程序猿慢慢成长为项目经理。</p>

<p>2011年10月加入华为，回归码农身份，目前聚焦在web开发领域的前后端技术，关注node,golang等语言发展，对数学知识和游戏设计算法等较感兴趣。</p>

<p>闲时也参加各种前端的论坛（D2,沪js），向往北京，上海，杭州等地的技术氛围，期望加入更高平台提升自己</p>

<p><strong>2011.10 － 至今： 华为南研所 前端工程师</strong></p>

<ul>
<li>开发基于webkit浏览器的iptv机顶盒的web前端应用</li>
<li>参考spm，开发了为项目组定制的seajs打包工具<br/>
<a href="https://github.com/gxcsoccer/scc">https://github.com/gxcsoccer/scc</a></li>
<li>做为web端负责人和机顶盒团队一起完成了iptv应用web化和html5浏览器性能优化的项目<br/>
<a href="http://gxcsoccer.github.io/HTML5EPG/">http://gxcsoccer.github.io/HTML5EPG/</a></li>
</ul>


<p><strong>2006.7 － 2011.9：新蛋科技（成都）   工程师｜项目经理</strong></p>

<ul>
<li>负责Newegg MarketPlace项目订单管理模块的设计和开发，前后台均有涉及，前台主要是开发Silverlight页面供Seller管理追踪其订单，后台主要是负责处理Seller的Datafeed以及和其他模块例如PO，Account，WMS等系统交互</li>
<li>主导了公司EDI系统迁移到BizTalk Server上的项目</li>
<li>参与EDI(电子数据交换)系统的开发和维护，主要涉及文件交换，解析，多线程，xml解析和转换等等。</li>
</ul>


<h2>技术能力：</h2>

<ul>
<li>Javascript语言自认还是比较熟悉，能够输出较高质量的代码</li>
<li>HTML5相关的特性有一定的研究，很多在项目中已经使用</li>
<li>对Nodejs及redis，mongdb等技术还比较熟悉，平时喜欢用它们开发一些工具以及一些简单的web应用</li>
<li>对游戏开发有些小研究，属于平时自己瞎折腾，例如：碰撞检测，粒子系统和寻路等等</li>
<li>5年.net经验，但是有一年多没碰了：）</li>
</ul>


<h3><a href="https://github.com/gxcsoccer/">我的github项目</a></h3>

<ul>
<li><a href="https://github.com/gxcsoccer/HTML5EPG">HTML5EPG</a> 将android原生的电视导航应用移植到基于webkit的浏览器上</li>
<li><a href="https://github.com/gxcsoccer/ParticleSystem">ParticleSystem</a> 粒子系统的一个实现</li>
<li><a href="https://github.com/gxcsoccer/LinqJs">LingJs</a> 提供LINQ风格的javascript库</li>
<li><a href="https://github.com/gxcsoccer/ProfilingTool">ProfilingTool</a> 一个web性能检测小工具</li>
<li><a href="https://github.com/gxcsoccer/orz">orz</a> 一个简单的redis数据访问库</li>
<li><a href="https://github.com/gxcsoccer/jsonbuf">jsonbuf</a> 一个简单的将JSON格式压缩为二进制格式的库</li>
<li><a href="https://github.com/gxcsoccer/sultana">sultana</a> 对socket.io进行connect风格的封装</li>
<li><a href="https://github.com/gxcsoccer/node-rpc">node-rpc</a> 一个rpc框架</li>
<li><a href="https://github.com/gxcsoccer/collision-lab">collision-lab</a> 碰撞实验室，根据小胖的视频教程做了一些实践</li>
<li><a href="https://github.com/gxcsoccer/trait">trait</a> 生成可复用mixin的类库</li>
<li><a href="https://github.com/gxcsoccer/scc">scc</a> 一个定制化的seajs的打包工具</li>
<li><a href="https://github.com/gxcsoccer/pitaya">pitaya</a> 一个RESTful风格的api库，同时支持json和二进制格式</li>
<li><a href="https://github.com/zhangchunsheng/html5_kof">html5_kof</a> 基于melonJs的html5游戏</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自己写一个seajs的打包工具]]></title>
    <link href="http://gxcsoccer.github.com/blog/2012/12/20/scc/"/>
    <updated>2012-12-20T01:24:00+08:00</updated>
    <id>http://gxcsoccer.github.com/blog/2012/12/20/scc</id>
    <content type="html"><![CDATA[<p>最近的项目中使用了玉伯的<a href="http://seajs.org">seajs</a>。在项目归档的时候需要把上百个文件combine到一起，本来想用seajs配套的<a href="https://github.com/spmjs/spm">spm</a>来做，但是看了看似乎有点复杂，索性自己写了一个小工具。</p>

<p>其实我们的需求比较简单：把通过require加载的js文件都打到一个文件里，而通过use加载的就不用了。</p>

<p>combine一般的js文件非常容易，只需要按照依赖顺序做文件的合并即可。但是对于型如：<code>define(function(){ … })</code>这样seajs风格文件这样显然是不行，浏览器会狂报404。那么应该如何做呢？</p>

<p>我们在使用define函数去定义一个模块时一般都只会传一个函数作为参数，实际上define函数有三个参数</p>

<ul>
<li>id: 模块的标识，如果这个参数不传，会使用文件的url作为文件标识</li>
<li>deps: 依赖列表，如果这个参数不传，seajs会分析函数body找出依赖列表</li>
<li>body: 模块体</li>
</ul>


<!--more-->




<div><script src='https://gist.github.com/4504426.js?file='></script>
<noscript><pre><code>define(function(require, exports, module) {

  // The module code goes here

});

/**  the full version  **/
define(id, deps, function(require, exports, module) {

  // The module code goes here

});</code></pre></noscript></div>


<p>那么要合并文件，其实就是要将id和deps参数补全，我的做法是：</p>

<ol>
<li>设置一个入口文件</li>
<li>分析文件的依赖关系</li>
<li>使用文件名作为id，将define参数补齐</li>
<li>递归处理文件依赖的资源，直到所有依赖文件都已经打包到一起</li>
</ol>


<p>安装和运行方式</p>

<blockquote><p>npm install scc -g</p>

<p>$ scc</p></blockquote>

<p>具体代码参考<a href="https://github.com/gxcsoccer/scc">这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何停掉CSS3动画？]]></title>
    <link href="http://gxcsoccer.github.com/blog/2012/09/04/how-to-stop-css3-transition/"/>
    <updated>2012-09-04T00:07:00+08:00</updated>
    <id>http://gxcsoccer.github.com/blog/2012/09/04/how-to-stop-css3-transition</id>
    <content type="html"><![CDATA[<p>CSS3里面提供原生的动画（Animation）和过渡（Transition）支持，使用起来非常简单方便，但是一直有一个问题困扰着我：如何实现像JQuery动画提供stop方法一样的功能？</p>

<p>今天在学习bootstrap代码的时候发现一段有意思的代码。这段代码意图非常简单，就是要显示$element元素，并且给它加上&#8221;in&#8221;类，使其产生slide in的效果。但让我看不懂的是：<code>that.$element[0].offsetWidth</code>这句代码，好像没有做什么实质性的事情，后面的注释写的是force reflow（强制重绘）。</p>

<div><script src='https://gist.github.com/3611790.js?file='></script>
<noscript><pre><code>that.$element.show();

if (transition) {
that.$element[0].offsetWidth // force reflow
}

that.$element.addClass('in');</code></pre></noscript></div>


<p>在网上查找了相关的资料，看到<a href="http://stackoverflow.com/questions/9016307/force-reflow-in-css-transitions-in-bootstrap">Stackoverflow</a>上有人做了解答：</p>

<blockquote><p>That&#8217;s where the call to the left offset comes in. This is one of the properties that are said to cause a re-flow in the page. This is obviously usually a bad thing performance wise, but it seems necessary to prevent the css transitions picking up the wrong values.</p></blockquote>

<p>大概的意思是：读取offsetWidth(或者left offset)导致了浏览器的<code>re-flow</code>操作，这样做的目的有点类似我们在使用buffer时候的flush操作，虽然会带来性能问题，但是在特定场景下可以防止css3 tranisition取到错误的值。</p>

<!--more-->


<h3>如何利用force reflow停掉进行中的css3动画？</h3>

<p>请看下面的例子（<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=649247">在firefox下有问题</a>，请用webkit浏览器）。点击背景，红色的方块会朝右移动到600px的位置，在中途如果再次点击桌面，方块会停止动画，直接跳到目标位置（600px）</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/Y8PRF/embedded/result,js,html,css/light/"></iframe>


<p>那么如果我们对代码稍做修改，注释掉<code>$box[0].scrollLeft;</code>这行，再运行，发现第二次点击背景时动画无法停掉。</p>

<h3>什么情况下会触发浏览器的reflow?</h3>

<ul>
<li>DOM元素的添加、修改（内容）、删除( Reflow + Repaint)</li>
<li>仅修改DOM元素的字体颜色（只有Repaint，因为不需要调整布局）</li>
<li>应用新的样式或者修改任何影响元素外观的属性</li>
<li>Resize浏览器窗口、滚动页面</li>
<li>读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、 scrollTop/Left/Width/Height、clientTop/Left/Width/Height、 getComputedStyle()、currentStyle(in IE))</li>
</ul>


<h3>避免滥用force reflow</h3>

<p>浏览器频繁的repaint/reflow会带来严重的性能问题，所以非必须的情况下应该尽量避免触发reflow。下面是常用优化方法：</p>

<ul>
<li>避免在document上直接进行频繁的DOM操作，如果确实需要可以采用off-document的方式进行</li>
<li>集中修改样式</li>
<li>缓存Layout属性值</li>
<li>设置元素的position为absolute或fixed</li>
<li>权衡速度的平滑</li>
<li>不要用tables布局</li>
<li>不要在css里面写expression</li>
</ul>


<p>具体描述可以参考：<a href="http://www.blueidea.com/tech/web/2011/8365.asp">http://www.blueidea.com/tech/web/2011/8365.asp</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端中的数学知识]]></title>
    <link href="http://gxcsoccer.github.com/blog/2012/06/24/mathematic-in-web/"/>
    <updated>2012-06-24T22:48:00+08:00</updated>
    <id>http://gxcsoccer.github.com/blog/2012/06/24/mathematic-in-web</id>
    <content type="html"><![CDATA[<p>最近在学习webgl，看得很吃力，感叹学校里的数学知识都已经全还给老师。总结一下这几天恶补的数学知识，以免猴子搬苞谷。。。</p>

<h2>矢量（vector）</h2>

<p><strong>矢量</strong>亦称<strong>向量</strong>。指一个同时具有大小和方向的几何对象，数学中相对于<strong>标量</strong>（只有大小）。</p>

<p>矢量有多种表示方法，比如：用起点A和终点B来表示<img src="http://gxcsoccer.github.com/images/post/vector.png" alt="" />；在三维直角坐标系Oxyz里可以用原点（0,0,0）到空间中任意一点表示一个向量。</p>

<p><img src="http://gxcsoccer.github.com/images/post/3d.png" alt="" /> <img src="http://gxcsoccer.github.com/images/post/col_vector.png" alt="" /></p>

<h3>单位矢量</h3>

<p>矢量空间中的单位矢量就是长度为1的矢量。也就是<strong>模</strong>为1的矢量。</p>

<h3>基本矢量</h3>

<p>三维直角坐标系中，基本矢量就是以横轴（Ox）、竖轴（Oy） 以及纵轴（Oz） 为方向的三个单位矢量<img src="http://gxcsoccer.github.com/images/post/unit_v.png" alt="" />。这三个矢量取好以后，其它的矢量就可以通过三元数组来表示，因为它们可以表示成一定倍数的三个基本矢量的总合。比如说一个标示为(2,1,3)的矢量就是2个矢量<img src="http://gxcsoccer.github.com/images/post/i_v.png" alt="" />加上1个矢量<img src="http://gxcsoccer.github.com/images/post/j_v.png" alt="" />加上3个矢量<img src="http://gxcsoccer.github.com/images/post/k_v.png" alt="" />得到的矢量。</p>

<p><img src="http://gxcsoccer.github.com/images/post/v_fn.png" alt="" /></p>

<p>更多矢量相关知识参考：<a href="http://zh.wikipedia.org/wiki/%E7%9F%A2%E9%87%8F">http://zh.wikipedia.org/wiki/%E7%9F%A2%E9%87%8F</a>， 这里就不赘述了。</p>

<h2>矩阵（Matrix）</h2>

<p>数学上，一个m×n的矩阵是一个由m行n列元素排列成的矩形阵列。矩阵里的元素可以是数字、符号或数学式。以下是一个由6个数字符素构成的2行3列的矩阵：<img src="http://gxcsoccer.github.com/images/post/matrix.png" alt="" /></p>

<!--more-->


<h3>矩阵的运算</h3>

<p>矩阵的运算包括加（减），数乘，转置和乘法等。</p>

<blockquote><p>加法: m * n 矩阵A和B的和（差）：A±B为一个m×n矩阵，其中每个元素是A和B相应元素的和（差）</p>

<p>数乘：标量c与矩阵A的数乘：cA的每个元素是A的相应元素与c的乘积</p>

<p>转置：m * n 矩阵A的转置是一个n×m的矩阵，记为AT（有些书中也记为Atr 或tA、A&#8217;），其中的第i个行向量是原矩阵A的第i个列向量；或者说，转置矩阵AT第i行第j列的元素是原矩阵A第j行第i列的元素</p></blockquote>

<p>下面着重讲下矩阵的乘法</p>

<blockquote><p>两个矩阵的乘法仅当第一个矩阵A的列数和另一个矩阵B的行数相等时才能定义。如A是m * n矩阵和B是n * p矩阵，它们的乘积AB是一个m * p矩阵，它的一个元素</p>

<p><img src="http://gxcsoccer.github.com/images/post/m_m.png" alt="" /></p>

<p>其中 1 ≤ i ≤ m, 1 ≤ j ≤ p</p></blockquote>

<p>矩阵的乘法满足结合律和分配律，但是不满足交换律。</p>

<p>更多矩阵相关知识参考：<a href="http://zh.wikipedia.org/wiki/%E7%9F%A9%E9%98%B5">http://zh.wikipedia.org/wiki/%E7%9F%A9%E9%98%B5</a></p>

<h2>线性变换</h2>

<p>中学的时候，我们学习了一元线性方程<strong>f(x) = kx</strong>，如果将他放到2维的坐标系中，它就是一条过原点的直线。现在我们从2维推广到n维</p>

<p><img src="http://gxcsoccer.github.com/images/post/fn_group.png" alt="" /></p>

<p>好像复杂了很多，它还能称之为线性方程吗？</p>

<p>现在我们就要运用上面讲到的向量和矩阵来表示n维线性方程，它的形式是<strong>b = Ax</strong>，</p>

<p><img src="http://gxcsoccer.github.com/images/post/fn_group2.png" alt="" /></p>

<p>A是一个m x n的矩阵，x是一个向量，你可能发现了，这和上面最简单的一元线性方程很像，这样初等线性函数和高等线性函数在形式上就统一起来了。</p>

<p>从几何上解释<strong>b = Ax</strong>就是：向量x经过线性变换后变成了向量b。换句话说我们可以用矩阵来表达<strong>线性变换</strong>，矩阵A就是这个线性变换的<strong>变换矩阵</strong></p>

<p>那我们常见的线性变换有：</p>

<ul>
<li>旋转</li>
<li>缩放</li>
<li>平移（注意：平移本来不是线性变换，但我们可以用n+1维矩阵来表示）</li>
</ul>


<p>我来看看在三维空间下，它们的变换矩阵分别是什么呢？</p>

<h3>平移变换</h3>

<p>大家下面看到的变换矩阵都是4 * 4的，主要原因是为了将平移和其他线性变换能够统一起来</p>

<p><img src="http://gxcsoccer.github.com/images/post/tranlate.jpg" alt="" /></p>

<h3>缩放变换</h3>

<p>局部比例变换的变换矩阵如下：</p>

<p><img src="http://gxcsoccer.github.com/images/post/p_scale.gif" alt="" /></p>

<p>整体比例变换的变换矩阵如下：</p>

<p><img src="http://gxcsoccer.github.com/images/post/w_scale.gif" alt="" /></p>

<h3>旋转变换</h3>

<p>三维旋转满足右手定则：大拇指指向围绕旋转的轴向，四指转的方向为正向。</p>

<p><img src="http://gxcsoccer.github.com/images/post/rotate_rule.gif" alt="" /></p>

<p>绕z轴旋转</p>

<p><img src="http://gxcsoccer.github.com/images/post/z-rotate.jpg" alt="" /></p>

<p>绕x轴旋转</p>

<p><img src="http://gxcsoccer.github.com/images/post/x-rotate.jpg" alt="" /></p>

<p>绕y轴旋转</p>

<p><img src="http://gxcsoccer.github.com/images/post/y-rotate.jpg" alt="" /></p>

<p>我们可以试着证明一下绕x轴的旋转变换矩阵:</p>

<blockquote><p>例如：有一个向量v = (x, y, z), 现在我想让它绕x轴旋转Ɵ度，得到一个新得向量w。根据上面内容，我们应该用(x, y, z, 1)乘以Trx，根据矩阵乘法法则，得到的新向量w = (x, ycosƟ － zsinƟ, zcosƟ ＋ ysinƟ)</p>

<p>我们用另外的思路推导一下，假设向量v的模为r，旋转前相对于x轴的角度为∂，那么旋转Ɵ度后，在y轴上的投影为r * cos(∂ + Ɵ)，在z轴上的投影为r * sin(∂ + Ɵ)，根据正弦余弦公式的推导</p>

<p>r * cos(∂ + Ɵ) = r * (cos∂cosƟ - sin∂sinƟ)</p>

<p>r * cos(∂ + Ɵ) = r * cos∂cosƟ - r * sin∂sinƟ</p>

<p><em>r * cos(∂ + Ɵ) = ycosƟ － zsinƟ</em></p>

<p>同理：</p>

<p>r * sin(∂ + Ɵ) = r * (sin∂cosƟ + cos∂sinƟ)</p>

<p>r * sin(∂ + Ɵ) = r * sin∂cosƟ + r * cos∂sinƟ   <br/>
<em>r * sin(∂ + Ɵ) = zcosƟ ＋ ysinƟ</em></p></blockquote>

<p>先写到。。。睡觉了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript奇技淫巧（持续更新）]]></title>
    <link href="http://gxcsoccer.github.com/blog/2012/05/09/javascript-tips/"/>
    <updated>2012-05-09T02:21:00+08:00</updated>
    <id>http://gxcsoccer.github.com/blog/2012/05/09/javascript-tips</id>
    <content type="html"><![CDATA[<p>JavaScript是一门很“飘逸”的语言，网上很多朋友总结了其中不少奇技淫巧。其实，这些技巧并不都推荐使用，但是了解其背后的原理能帮助你更上一层楼。在此收集了其中一些附在下面：</p>

<h2>把数值类型装换为字符串</h2>

<h3>转型： 1 + &#8221;</h3>

<blockquote><p>这个比较简单，加法运算符接收两个参数中，任意一个是字符串，会将另位一个转换为字符串，然后拼接起来。</p></blockquote>

<h2>把字符串转换为数值类型</h2>

<h3>转型：+&#8217;1&#8217;</h3>

<blockquote><p>我们知道<code>-</code>作为减法运算符时接收两个参数，而作为求负运算符时，接收一个参数。JavaScript 支持另一个不多见的“求正”的<code>+</code>运算符。显然，<code>+</code>会尝试把任何接收到的参数转换为数值型。如此，我们就有了一个廉价转型方法，考虑一下：<code>parseInt('123')</code>vs<code>+'123'</code>.</p></blockquote>

<h3>举一反三</h3>

<ul>
<li><code>'1' * 1</code>乘法运算符接收数值型参数，字符串会先转换成数字再和1做计算</li>
<li><code>'1' / 1</code>同上</li>
<li><code>'1' - 0</code>同上</li>
<li><code>'1' + 0</code>注意是不行的，它得到的值是：<code>'10'</code>。因为加法运算符两个参数中如果有一个为字符串，会将另外一个转换为字符串，然后将两个字符串拼接起来</li>
</ul>


<h3>转型并取整：&#8217;123.4&#8217; | 0</h3>

<blockquote><p>这里使用“或运算”将左边得字符串隐式转换为数值型，再与<code>0</code>或。所有位运算逗要求使用<strong>32</strong>位整数参与运算。所以这又式一个廉价得转换取整方法。考虑一下：<code>Math.floor('1234.5')</code>vs<code>'1234.5' | 0</code></p>

<p>但是，<strong>32</strong>位整数表示的数据范围是有限的，因此这一招在数值超过2<sup>31</sup> - 1时不适用，考虑一下<code>'12345678912.3' ^ 0</code></p></blockquote>

<h3>举一反三</h3>

<ul>
<li><code>'1234.5' ^ 0</code>完成转型并取整，与<code>0</code>异或，得到它本身。</li>
<li><code>~~'1234.5'</code>同样可以完成转型并取整，两次取反后得到本身。</li>
<li><code>--'1234.5'</code>会失败。虽然我们说负负得正，但是在C语系中，<code>--</code>运算符优先级高于单个<code>-</code>。解决办法很简单，把<code>--</code>写成<code>- -</code>就好啦，赠加一个空格避免运算符被错误地识别。同理，<code>++</code>也要这么处理。</li>
</ul>


<!--more-->


<h2>数组操作</h2>

<blockquote><p>arguments是一个“著名”的类数组对象。在看JQuery代码的时候发现，只要一个Object实现了splice方法和length属性，在浏览器中就会被认为是一个数组</p></blockquote>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/LbyMF/embedded/js/light/"></iframe>


<h3>遍历数组</h3>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/tazSk/embedded/js/light/"></iframe>


<blockquote><p>淫巧1有一个问题：当数组元素是null，undefined，0，false等时会造成循环终止。</p>

<p>淫巧2说明数组也是一个普通的Object，索引0,1,2…是数组的属性，需要注意的是在Javascript里面纯数字是不能作为变量和属性名字的，作为Object的属性时，它们实际上是string类型的，鲜为人知的是用中括号[]存取时，JS引擎内部隐式的将数字转成了字符串。</p></blockquote>

<h2>懒人的闭包</h2>

<p>闭包即<code>function() {}</code>代码块。通常需要控制JavaScript变量作用域时，我们把代码放在这个块中运行：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">sth</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">);</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>失败的闭包</h3>

<p>上面的代码中要写两对括号，如果代码块太长的话，上下的括号不方便对照。于是，你可能会有意无意漏掉<code>function</code>周围的括号:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">sth</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">);</span>
</span><span class='line'><span class="p">}();</span>
</span></code></pre></td></tr></table></div></figure>


<p>很不幸，运行这段代码会报语法错误（不同 JavaScript 执行程序抛出的异常信息可能会不一样）：</p>

<p><code>Exception: SyntaxError: Unexpected token '('</code></p>

<blockquote><p>背景知识：<strong><code>()</code>只能用来求值、定义参数列表或调用函数表达式（<em>expression</em>）</strong>。本来，<code>function() {}</code>定义的一个函数字面量（如同数组字面量 []）表达式是可以拿来调用的，但是由于设计上的原因，<code>function</code>有两种表达形式：<code>function fn() {};</code>: 这是函数声明（<em>declaration</em>）的语句（statement）；<code>var foo = function() {}</code>: 这是函数字面量（<em>literal</em>）表达式。与上面雷同的写法<code>var foo = function fn() {}</code>也是合法的表达式，不过有一点小<a href="http://ejohn.org/apps/learn/#11">区别</a>。</p></blockquote>

<p>即是说，<strong>JavaScript 需要有足够的上下文（<em>context</em>）才能判断 function 的使用属于语句还是表达式。</strong>
S
对于单独（在语句前后加上分号将其表达为独立语句）的<code>;function() {}();</code>来说，JavaScript无法区分其中的<code>function</code>是表达式还是语句。此时，JavaScript选择了传统的语句识别，于是它被识别为两个语句————两个有问题的语句：前者缺少函数名称声明，后者不允许使用空的<code>()</code>进行求值。</p>

<p>于是懒人们行动了，网上流传了一些不写第一组括号也能正确运行的闭包。</p>

<h3>懒人的解决方案</h3>

<p>这是比较常见的懒人闭包：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">+</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">sth</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">);</span>
</span><span class='line'><span class="p">}();</span>
</span></code></pre></td></tr></table></div></figure>


<p>为什么它能执行？因为它很好地“营造”了一个让JavaScript将其中的 <code>function</code>识别为表达式的环境————通过单目求正运算符，让 JavaScript知道这里的<code>function</code>不可能是语句。哪有对语句进行运算的啊。</p>

<h3>举一反三</h3>

<p>既然写个<code>+</code>运算符就行，那就好玩了：</p>

<ul>
<li><code>-function() { return -1; }()</code>求负也行哈。PS: 如果你运行这个语句，会得到 1, 因为函数返回的 -1 被你求负了一次。</li>
<li><code>!function() { return -1; }()</code>取非也没问题。提问：运行它会返回什么？</li>
<li><code>1 + function() { return -1; }()</code>非常标准的表达式，当然 OK 啦…</li>
<li><code>void function() { return -1; }()</code>亲，<code>void</code>也是运算符哦，<code>delete</code>能用吗？当然可以！</li>
<li><code>1, function() { return -1; }()</code>别把逗号不当运算符！</li>
<li><code>~function() { return -1; }()</code>位运算符也来凑热闹了哈…</li>
<li>还可以写很多，随便怎么玩，只要组成表达式就行，自由发挥吧…</li>
</ul>


<h2>String.replace的妙用</h2>

<blockquote><p>JavaScript的<code>String.replace</code>方法应该大家都了解，可是你掌握了吗？<code>replace</code>有接受两个参数，第一个参数可以是字符串，也可以是正则表达式，第二个参数除支持字符串之外，还支持$1形式正则匹配的文本，除此之外还支持传入一个处理函数，这个函数的return值就是要替换成的内容。</p>

<p>了解更多javascript的String.replace用法，访问：<a href="http://www.w3school.com.cn/js/jsref_replace.asp">http://www.w3school.com.cn/js/jsref_replace.asp</a></p></blockquote>

<p>在实际开发中，我们会遇到对于一些集合做重复性的操作。假如，我们要获取div1, div2, div3…的长和宽。最笨的办法就是先取div1的，再取div2的，以此类推。这样重复代码多，而且不“优雅”。当然你也可以将重复代码提取为一个函数，但是这个函数可能就这个地方用的到，没有通用性，比较浪费。</p>

<p>那么自然大家想到了使用循环，将div1, div2, div3…放到数组里面，然后循环数组</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;div1&#39;</span><span class="p">,</span> <span class="s1">&#39;div2&#39;</span><span class="p">,</span> <span class="s1">&#39;div3&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">i</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// do something</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然还可以这样：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;div1 div2 div3&#39;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">i</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// do something</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样对于支持forEach的高级浏览器还是可以的，否则需要扩展数组原型了，不提倡扩展原型，即使不扩展原型提供个额外的函数来操作，就又是浪费。</p>

<p>如果使用了JQuery或者underscore，还可以用它提供的each方法：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="s1">&#39;div1 div2 div3&#39;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">),</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">a</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// do something</span>
</span><span class='line'><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，其实我们用replace就可以实现类似的功能：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">wh</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="s2">&quot;div1 div2 div3&quot;</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^ ]+/g</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">wh</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="s1">&#39;Width Height&#39;</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^ ]+/g</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">wh</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">elem</span><span class="p">[</span><span class="s1">&#39;offset&#39;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">]</span> <span class="o">||</span> <span class="nx">elem</span><span class="p">[</span><span class="s1">&#39;client&#39;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">wh</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>位运算判断元算是否在集合中</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">~</span><span class="s1">&#39;abc&#39;</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// do something</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 等价于</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// do something</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>背景知识：<code>补码</code>：任何数值n的位反等于-(n + 1):
~n === -(n + 1)。很明显，只有~-1才等于0。</p>

<p>String的<code>indexOf</code>方法，找到时，返回自然数；没找到，则返回-1。</p></blockquote>

<p>其实两种写法的差别不大，用位运算更简洁一些，但随之而且也可能造成代码比较晦涩</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始用octopress写博客]]></title>
    <link href="http://gxcsoccer.github.com/blog/2012/02/13/my-first-blog/"/>
    <updated>2012-02-13T00:55:00+08:00</updated>
    <id>http://gxcsoccer.github.com/blog/2012/02/13/my-first-blog</id>
    <content type="html"><![CDATA[<h2>注册和配置Git</h2>

<p>开始之前，确保你已经有了<a href="http://github.com">Github</a>账号一枚和Git的正确配置。没有的朋友可以先移步<a href="http://github.com">Github</a>注册并<a href="http://help.github.com/win-set-up-git/">安装配置Git</a></p>

<p>首先，创建你的blog仓库：“username(请确保和你的帐号相同).github.com”</p>

<pre><code>$ mkdir username.github.com
$ cd username.github.com
</code></pre>

<p>在仓库下新建一个HTML文件</p>

<figure class='code'><figcaption><span>index.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>Hello World<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1&gt;</span>Hello World!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>初始化仓库、提交并push到Github:</p>

<pre><code>$ git init
$ git add .
$ git commit -a -m 'init commit.'
$ git remote add origin
$ git push origin master
</code></pre>

<p>ok了，用username.github.com就可以访问上面的页面</p>

<!--more-->


<h2>安装Octopress</h2>

<p><a href="http://octopress.org/">Octopress</a>是一个基于ruby的静态博客管理工具。具体安装过程可以参考<a href="http://octopress.org/docs/setup/">官方网站</a>，这里就不赘述了</p>

<p>这里只讲一些要点：</p>

<ul>
<li>需要在定制文件： <code>_config.yml</code> 中把twitter中的信息全部删掉，否则由于防火长城GFW的原因，将会造成页面load很慢。</li>
<li>需要在定制文件/source/_includes/custom/head.html 把google的自定义字体去掉，否则方滨兴老师会让你的网站时不时卡一下。</li>
<li>发布文章用<code>rake new_post["title"]</code></li>
<li>文章使用markdown语言进行编写，相关的语法可以参考<a href="http://daringfireball.net/projects/markdown/syntax">这里</a></li>
<li>文章写好以后用<code>rake generate</code>生成静态HTML页面，建议用<code>rake preview</code>在本地预览以下<a href="http://localhost:4000">http://localhost:4000</a></li>
<li>没有问题后调用<code>rake deploy</code>部署。</li>
</ul>


<h2>Q&amp;A</h2>

<h3>解决rake generate命令invalid byte错误的方法</h3>

<p><img src="http://gxcsoccer.github.com/images/post/invalid_byte.png" title="Invalid Byte" alt="Invalid Byte" /></p>

<pre><code>$ export LC_CTYPE=en_US.UTF-8
$ export LANG=en_US.UTF-8
</code></pre>

<h2>参考文档</h2>

<ul>
<li><a href="http://octopress.org/docs/">http://octopress.org/docs/</a></li>
<li><a href="http://tangqiaoboy.blog.163.com/blog/static/1161142582011112510244675/">http://tangqiaoboy.blog.163.com/blog/static/1161142582011112510244675/</a></li>
<li><a href="http://daringfireball.net/projects/markdown/syntax">http://daringfireball.net/projects/markdown/syntax</a></li>
<li><a href="http://taberh.me/2011/12/26/use-Jekyll-build-Blog-on-Github.html">http://taberh.me/2011/12/26/use-Jekyll-build-Blog-on-Github.html</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
