<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript, | 彼得_$]]></title>
  <link href="http://gxcsoccer.github.com/blog/categories/javascript-/atom.xml" rel="self"/>
  <link href="http://gxcsoccer.github.com/"/>
  <updated>2013-05-16T07:40:15+08:00</updated>
  <id>http://gxcsoccer.github.com/</id>
  <author>
    <name><![CDATA[彼得_$]]></name>
    <email><![CDATA[gxcsoccer@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OPP in JavaScript]]></title>
    <link href="http://gxcsoccer.github.com/blog/2013/05/16/javascript-oop/"/>
    <updated>2013-05-16T03:32:00+08:00</updated>
    <id>http://gxcsoccer.github.com/blog/2013/05/16/javascript-oop</id>
    <content type="html"><![CDATA[<blockquote><p>面向对象的设计思想是语言无关的。但是在实现上JavaScript和其他语言还是有些区别的。</p></blockquote>

<h2>对象的构造：</h2>

<ul>
<li><strong>字面量</strong>  可以用JSON风格直接构造一个对象，这是一种非常直接和简洁的对象创建方式。</li>
</ul>


<p>```
var obj = {</p>

<pre><code>name: "Peter Gao",
age: 29
</code></pre>

<p>};</p>

<p>obj.sex = "male";
delete obj.age;
```</p>

<ul>
<li><p><strong>构造函数</strong>  和其他面向对象语言类似，我们可以使用new关键字加构造函数的方式来创建一个对象，在<code>new A</code>的时候JavaScript引擎做了下面几件事情：</p>

<ol>
<li>创建一个新的对象</li>
<li>将对象的contructor属性设置为A</li>
<li>将A.prototype设置为新对象的原型</li>
<li>以新对象为上下文(context)执行A</li>
</ol>
</li>
<li><p><strong>Object.create</strong>  这是ECMAScript 5里面提供的一个新方法，通过这个方法我们可以直接指定对象的原型。甚至通过<code>Object.create(null)</code>我们可以创建一个没有原型的“干净”对象</p></li>
</ul>


<!--more-->


<h2>面向对象的三大特性：</h2>

<ul>
<li><strong>封装</strong>  和其他语言不同的是，JavaScript里对象没有私有属性的概念，很多时候我们约定以下划线开头的属性为私有的，但这只是一个“君子协议”。如果实在要模拟私有属性，我们可以通过function来构造一个沙箱，沙箱里的局部变量是私有的，外部不能访问，通过function的返回值来暴露接口给外面调用</li>
</ul>


<p>```
function getObject() {</p>

<pre><code>var privateProp = "p"; // 局部变量，外层无法访问

return {
    getProp: function() {
        return privateProp;
    },
    setProp: function(val) {
        privateProp = val;
    }
};
</code></pre>

<p>}</p>

<p>```</p>

<ul>
<li><strong>继承</strong>  JavaScript的原生语法是不支持继承的，但是其原型链的设计可以很好的支持继承。具体的实现方法有很多种，在这儿不一一列举了。</li>
</ul>


<p>```
var Monster = function(life) {</p>

<pre><code>this.life = life;
</code></pre>

<p>}</p>

<p>Monster.prototype.eat = function() {</p>

<pre><code>this.life += 5;
</code></pre>

<p>};</p>

<p>var Dragon = function() {</p>

<pre><code>Monster.call(this, 100);
</code></pre>

<p>};</p>

<p>Dragon.prototype.<strong>proto</strong> = Monster.prototype;</p>

<p>Dragon.prototype.fight = function() {</p>

<pre><code>this.life -= 10;
</code></pre>

<p>};
```</p>

<ul>
<li><strong>多态</strong>
这个没什么好说的，对象可以覆盖父类的属性和方法，因为JavaScript是顺着原型链往上查找属性和方法，直到找到为止。</li>
</ul>


<h2>鸭子类型</h2>

<p>作为一门动态语言，对象类型除了可以通过原型链来描述，还可以通过一个简单的对象来表示，即所谓的“鸭子类型”————只要看起来像鸭子，就是鸭子。这种方式可以避免构造过于复杂的原型链。我们可以将常用的功能定义为mixin，需要的话直接拿来用即可。</p>

<h2>几个重要的属性：</h2>

<ul>
<li><strong>obj.constructor</strong>: 指向对象的构造函数，这个属性可以被修改，但是不能通过修改该属性真正改变原型链</li>
</ul>


<p>```
var Cat = function() {}
var Dog = function() {}
var c = new Cat;
c.constructor = Dog;</p>

<p>c.constructor === Dog   // true
c instanceof Dog        // false
c instanceof Cat        // true
```</p>

<ul>
<li><p><strong>constructor.prototype</strong>: JavaScript里function本身也是一种特殊的对象，它包含一个属性prototype指向另一个对象，用该函数作为构造函数生成的对象就以prototype指向的对象作为原型</p></li>
<li><p><strong>obj.__proto__</strong>: 在标准浏览器上对象有一个__proto__属性指向对象的原型，其等价于<code>obj.constructor.prototype</code>（如果<code>obj.constructor</code>没有被篡改）</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
